version: "3.8"

services:
  # Servicio principal de la API
  quickstack-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder # Usar stage de builder para desarrollo
    container_name: quickstack-api
    ports:
      - "${PORT:-5000}:${PORT:-5000}"
    environment:
      - NODE_ENV=development
      - PORT=${PORT:-5000}
      - API_VERSION=${API_VERSION:-v1}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    volumes:
      # Mount para hot reload en desarrollo
      - ./src:/app/src:ro
      - ./package.json:/app/package.json:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./tsconfig.build.json:/app/tsconfig.build.json:ro
    command: pnpm dev
    networks:
      - quickstack-network
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:${PORT:-5000}/api/v1', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis para caché y sesiones (opcional)
  redis:
    image: redis:7-alpine
    container_name: quickstack-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - quickstack-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL para base de datos (opcional)
  postgres:
    image: postgres:16-alpine
    container_name: quickstack-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-quickstack}
      - POSTGRES_USER=${POSTGRES_USER:-quickstack}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-quickstack123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    networks:
      - quickstack-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-quickstack} -d ${POSTGRES_DB:-quickstack}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Adminer para gestión de base de datos (opcional)
  adminer:
    image: adminer:4-standalone
    container_name: quickstack-adminer
    ports:
      - "8080:8080"
    networks:
      - quickstack-network
    restart: unless-stopped
    depends_on:
      - postgres

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  quickstack-network:
    driver: bridge
